@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click" />

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
    <div class="col-12">
        @if (Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favorites</th>
                        <th>Customer Favorites</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var objProduct in Products)
                    {
                        <tr>
                            <td>@objProduct.Name</td>
                            <td>
                                <input type="checkbox" disabled checked="@objProduct.ShopFavorites">
                            </td>
                            <td>
                                <input type="checkbox" disabled checked="@objProduct.CustomerFavorites">
                            </td>                            
                            <td>@objProduct.Category.Name</td>
                            <td>
                                <NavLink href="@($"product/edit/{objProduct.Id}")" class="btn btn-primary">Edit</NavLink>
                                <NavLink href="@($"product/price/{objProduct.Id}")" class="btn btn-success">Price</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objProduct.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                // loading gif
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                // no records
                <p>No Records Found</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }        
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if(isConfirmed && DeleteProductId != 0)
        {
            // delete
            var product = await _productRepository.Get(DeleteProductId);
            if (!product.ImageUrl.Contains("default.png"))
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }
            await _productRepository.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Продукт удалён");
            await LoadProduct();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
